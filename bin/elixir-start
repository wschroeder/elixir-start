#!/bin/bash

ELIXIR_DOCKER_IMAGE_VERSION=1.6.2
CREDO_VERSION=0.8.10
DIALYXIR_VERSION=0.5
DISTILLERY_VERSION=1.5
UATS_HTTPOISON_VERSION=1.0
WOBSERVER_VERSION=0.1.8
MSSQL_PASSWORD='What4StrongPassword!'

set -e

project_name=$1
if [[ -z "$project_name" ]]; then
    echo "$0 <project-name>"
fi

set -x

trap "sudo chown -R $(whoami) '$PWD'" EXIT

sudo rm -rf ${project_name}

ELIXIR_IMAGE="${project_name}/elixir:$ELIXIR_DOCKER_IMAGE_VERSION"

elixir_project_name=$(tr '-' '_' <<< $project_name)
elixir_class_name=$(sed 's/^\(.\)/\U\1/;s/_\(.\)/\U\1/g' <<< $elixir_project_name)
echo "Creating $project_name (elixir: $elixir_project_name)"

mkdir "$project_name"
cd "$project_name"

# Build Elixir image to include support for Phoenix and MSSQL
{
    mkdir elixir
    cp $HOME/.elixir-start/Dockerfile.elixir "$PWD/elixir/Dockerfile"
    sed -i "s/{{ELIXIR_DOCKER_IMAGE_VERSION}}/${ELIXIR_DOCKER_IMAGE_VERSION}/" "$PWD/elixir/Dockerfile"
    docker build -t ${ELIXIR_IMAGE} elixir/
}

# Lay down the Phoenix skeleton with MSSQL support
{
    mkdir -p "${PWD}/control/mix"
    docker run -v "${PWD}/control/mix":/root/.mix -v "${PWD}/$elixir_project_name":/work -w /work --rm ${ELIXIR_IMAGE} mix local.hex --force
    docker run -v "${PWD}/control/mix":/root/.mix -v "${PWD}/$elixir_project_name":/work -w /work --rm ${ELIXIR_IMAGE} mix archive.install --force https://github.com/phoenixframework/archives/raw/master/phx_new.ez
    yes | head -n 2 | docker run -i -v "${PWD}/control/mix":/root/.mix -v "${PWD}":/work -w /work --rm ${ELIXIR_IMAGE} mix phx.new --database mssql $elixir_project_name
    sudo chown -R $(whoami) "$PWD"
}

# Remove the standard Ecto and Phoenix test stuff; we want unit tests at
# this level, not feature tests or UATs.
{
    rm -rf ${elixir_project_name}/test
    mkdir ${elixir_project_name}/test
    echo 'ExUnit.start()' > ${elixir_project_name}/test/test_helper.exs
}

# Fixes of the default Phoenix template to make credo happy
{
    sed -i '/^defmodule/a \  @moduledoc """\n  The toplevel application starts the system, which includes everything\n  required to run a Phoenix application.\n  """' "${PWD}/$elixir_project_name/lib/$elixir_project_name/application.ex"
    sed -i "s/${elixir_class_name}Web\.Endpoint/WebEndpoint/g;/^  use Application/a \  alias ${elixir_class_name}Web.Endpoint, as: WebEndpoint" "${PWD}/$elixir_project_name/lib/$elixir_project_name/application.ex"
    sed -i "s/Phoenix\.Controller/Controller/g;/^  use ${elixir_class_name}Web/a \  alias Phoenix.Controller, as: Controller" "${PWD}/$elixir_project_name/lib/${elixir_project_name}_web/views/error_view.ex"
}

# Update Makefile
{
    cp $HOME/.elixir-start/Makefile "$PWD"
    sed -i "s/{{ELIXIR_IMAGE}}/$(sed 's/\//\\\//g' <<<${ELIXIR_IMAGE})/" Makefile
    sed -i "s/{{ELIXIR_PROJECT_NAME}}/${elixir_project_name}/" Makefile
    sed -i "s/{{MSSQL_PASSWORD}}/${MSSQL_PASSWORD}/" Makefile
}

# Update Makefile.setup-control
{
    cp $HOME/.elixir-start/Makefile.setup-control "$PWD"
    sed -i "s/{{ELIXIR_CLASS}}/$(sed 's/\//\\\//g' <<<${ELIXIR_CLASS})/" Makefile.setup-control
}

# Update mix.exs
{
    # deps
    sed -i "/^  defp deps do/,+1c \\  defp deps do\\n    [\\n      {:dialyxir, \"~> ${DIALYXIR_VERSION}\", only: [:dev], runtime: false}," "${elixir_project_name}/mix.exs"
    sed -i "/^  defp deps do/,+1c \\  defp deps do\\n    [\\n      {:credo, \"~> ${CREDO_VERSION}\"}," "${elixir_project_name}/mix.exs"
    sed -i "/^  defp deps do/,+1c \\  defp deps do\\n    [\\n      {:wobserver, \"~> ${WOBSERVER_VERSION}\"}," "${elixir_project_name}/mix.exs"
    sed -i "/^  defp deps do/,+1c \\  defp deps do\\n    [\\n      {:distillery, \"~> ${DISTILLERY_VERSION}\", runtime: false}," "${elixir_project_name}/mix.exs"

    # project options
    sed -i 's/ deps: deps()$/ deps: deps(),/;/ deps: deps(),/a \      dialyzer: [plt_add_deps: :project, plt_add_apps: [:plug, :ecto, :poison, :httpoison]],' "${elixir_project_name}/mix.exs"
    sed -i 's/ extra_applications: \(.*\)]/ extra_applications: \1, :wobserver]/' "${elixir_project_name}/mix.exs"

    # remove ecto "test" override
    sed -i 's/"test": \["ecto.create --quiet", "ecto.migrate", "test"\]/# test: ["ecto.create --quiet", "ecto.migrate", "test"]/' "${elixir_project_name}/mix.exs"
}

# Update .credo.exs
{
    cp $HOME/.elixir-start/.credo.exs "$PWD/$elixir_project_name/"
}

# Update .formatted.exs
{
    cp $HOME/.elixir-start/.formatter.exs "$PWD/$elixir_project_name/"
}

# Update config/
{
    sed -i "s/password: \"\"/password: \"${MSSQL_PASSWORD}\"/;s/hostname: \"localhost\"/hostname: \"${elixir_project_name}-mssql\"/" "$PWD/$elixir_project_name/config/dev.exs"
    sed -i "s/password: \"\"/password: \"${MSSQL_PASSWORD}\"/;s/hostname: \"localhost\"/hostname: \"${elixir_project_name}-mssql\"/" "$PWD/$elixir_project_name/config/test.exs"

    sed -i "s/password: \"\"/password: \"${MSSQL_PASSWORD}\"/" "$PWD/$elixir_project_name/config/prod.secret.exs"
    sed -i "/database:/a \  hostname: \"${elixir_project_name}-mssql\"," "$PWD/$elixir_project_name/config/prod.secret.exs"
    perl -i -0777 -pe "s{^config :${elixir_project_name}, ${elixir_class_name}Web.Endpoint,.*?\n\n}{config :${elixir_project_name}, ${elixir_class_name}Web.Endpoint,\n  load_from_system_env: true,\n  http: [port: {:system, \"PORT\"}],\n  url: [host: \"0.0.0.0\", port: {:system, \"PORT\"}],\n  cache_static_manifest: \"priv/static/cache_manifest.json\",\n  server: true,\n  root: \".\",\n  version: Application.spec(:${elixir_project_name}, :vsn)\n\n}sm" "$PWD/$elixir_project_name/config/prod.exs"
}

# Update bunch-config.js
{
    sed -i 's/};/  , notifications: false\n};/' "$PWD/$elixir_project_name/assets/brunch-config.js"
}

# Set up /healthz/ping endpoint
{
    sed -i '/get.* PageController,/a \    get("/healthz/readiness", HealthzController, :readiness)' "${elixir_project_name}/lib/${elixir_project_name}_web/router.ex"
    sed -i '/get.* PageController,/a \    get("/healthz/liveness", HealthzController, :liveness)' "${elixir_project_name}/lib/${elixir_project_name}_web/router.ex"
    sed -i '/get.* PageController,/a \    get("/healthz/ping", HealthzController, :ping)' "${elixir_project_name}/lib/${elixir_project_name}_web/router.ex"

    cp $HOME/.elixir-start/healthz_controller.ex "$PWD/$elixir_project_name/lib/${elixir_project_name}_web/controllers/healthz_controller.ex"
    sed -i "s/{{ELIXIR_CLASS}}/$elixir_class_name/" "$PWD/$elixir_project_name/lib/${elixir_project_name}_web/controllers/healthz_controller.ex"

    cp $HOME/.elixir-start/healthz_view.ex "$PWD/$elixir_project_name/lib/${elixir_project_name}_web/views/healthz_view.ex"
    sed -i "s/{{ELIXIR_CLASS}}/$elixir_class_name/g" "$PWD/$elixir_project_name/lib/${elixir_project_name}_web/views/healthz_view.ex"
    sed -i "s/{{ELIXIR_PROJECT_NAME}}/$elixir_project_name/g" "$PWD/$elixir_project_name/lib/${elixir_project_name}_web/views/healthz_view.ex"
}

# mix format
{
    docker run -v "${PWD}/control/mix":/root/.mix -v "${PWD}/$elixir_project_name":/work -w /work --rm ${ELIXIR_IMAGE} mix format mix.exs "lib/**/*.{ex,exs}" "test/**/*.{ex,exs}"
}

# Set up UATs directory
{
    docker run -v "${PWD}/control/mix":/root/.mix -v "${PWD}":/work -w /work --rm ${ELIXIR_IMAGE} mix new uats
    sudo chown -R $(whoami) "$PWD/uats"

    rm -rf "${PWD}/uats/"{lib,config,README.md,.formatter.exs}
    sed -i "/^  defp deps do/,+1c \\  defp deps do\\n    [\\n      {:httpoison, \"~> ${UATS_HTTPOISON_VERSION}\", only: [:test]}," "uats/mix.exs"

    rm "$PWD/uats/test/uats_test.exs"

    cp $HOME/.elixir-start/healthz_test.exs "$PWD/uats/test/healthz_test.exs"
    sed -i "s/{{ELIXIR_PROJECT_NAME}}/${elixir_project_name}/g" "$PWD/uats/test/healthz_test.exs"

    mkdir uats/mssql-image
    cp $HOME/.elixir-start/Dockerfile.mssql-image "$PWD/uats/mssql-image/Dockerfile"
    sed -i "s/{{ELIXIR_PROJECT_NAME}}/${elixir_project_name}/g" "$PWD/uats/mssql-image/Dockerfile"
    cp $HOME/.elixir-start/build-mssql.sh "$PWD/uats/mssql-image/build-mssql.sh"
    chmod +x "$PWD/uats/mssql-image/build-mssql.sh"
    sed -i "s/{{ELIXIR_PROJECT_NAME}}/${elixir_project_name}/g" "$PWD/uats/mssql-image/build-mssql.sh"

    mkdir uats/project-image
    cp $HOME/.elixir-start/Dockerfile.project-image "$PWD/uats/project-image/Dockerfile"
    sed -i "s/{{ELIXIR_PROJECT_NAME}}/${elixir_project_name}/g" "$PWD/uats/project-image/Dockerfile"
}

# Ensure everything is okay to run by running make; this also prebuilds PLTs
# for dialyzer -- the first round is SLOW.
{
    make
}

# Set up git
{
    cp $HOME/.elixir-start/.gitignore "$PWD"
    sed -i "s/{{ELIXIR_PROJECT_NAME}}/${elixir_project_name}/" .gitignore
    git init
    git add .
}

